- name: variable on play level
  hosts: all
  vars:
    URL: play.example.com
  tasks:
   - name: print URL
     ansible.builtin.debug:
       msg: URL = {{URL}}
#Note: If we declare a variable in PLAY level then all the tasks cen access that variable

- name: Variable from File in Play Level
  hosts: all
  vars_files:
    - sample-vars.yml
  tasks:
    - name: Print URL
      ansible.builtin.debug:
        msg: URL = {{URL}}
# We can load all the variables from a file, since it is on play level,all the tasks can be access the variables

- name: Print URL in Task level
  hosts: all
  tasks:
    - name: Print URL in task1
      ansible.builtin.debug:
        msg: URL == {{URL}}
      vars:
        URL: task1.example.com

    - name: Print URL in task2
      ansible.builtin.debug:
        msg: URL == {{URL}}
      vars:
        URL: task2.example.com

# Scope of task variable is only to that task, the other task can't access the other variables

- name: variable from Inventry
  hosts: all
  tasks:
    - name: Print URL
      ansible.builtin.debug:
        msg: URL == {{URL}}

##variable precedence
- name: variable precedence
  hosts: all
  vars:
    URL: play.example.com
  vars_files:
    - sample-vars.yml
  tasks:
    - name: print URL
      ansible.builtin.debug:
        msg: URL == {{URL}}
      vars:
        URL: task.example.com

# print Hostname of remote node
- name: print Hostname of remote node
  hosts: all
  tasks:
    - name: print hostname
      ansible.builtin.debug:
        msg: Hostname = {{ansible_hostname}}
    - name: print processer info
      ansible.builtin.debug:
        msg: "{{ansible_processor}}"
- name: Register a variable
  hosts: all
  tasks:
    - name: Run uptime command
      ansible.builtin.shell: uptime
      register: out

    - name: Declare a standard variable name
      ansible.builtin.set_fact:
         UPTIME_STDOUT: "{{OUT.stdout}}"

    - name: Print UPTIME_STDOUT
       ansible.builtin.debug:
         msg: "{{UPTIME_STDOUT}}"
